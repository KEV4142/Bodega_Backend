// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

#nullable disable

namespace Persistencia.Migrations
{
    [DbContext(typeof(BackendContext))]
    [Migration("20250530013318_MigracionInicial")]
    partial class MigracionInicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "51df7aae-a506-46ff-8e34-9f2f0c661885",
                            Name = "ADMINBODEGA",
                            NormalizedName = "ADMINBODEGA"
                        },
                        new
                        {
                            Id = "368cb24e-03d3-4a01-b558-dbde9b33272c",
                            Name = "CLIENT",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Modelo.Entidades.Lote", b =>
                {
                    b.Property<int>("LoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoteID"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<decimal>("Costo")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateOnly>("FechaVencimiento")
                        .HasColumnType("date");

                    b.Property<int>("ProductoID")
                        .HasColumnType("int");

                    b.HasKey("LoteID")
                        .HasName("pkLotesID");

                    b.HasIndex("ProductoID");

                    b.ToTable("Lotes", t =>
                        {
                            t.HasCheckConstraint("ckLotesCantidad", "Cantidad > -1");

                            t.HasCheckConstraint("ckLotesCosto", "Costo > 0");
                        });

                    b.HasData(
                        new
                        {
                            LoteID = 1,
                            Cantidad = 100,
                            Costo = 10m,
                            FechaVencimiento = new DateOnly(2027, 10, 1),
                            ProductoID = 1
                        },
                        new
                        {
                            LoteID = 2,
                            Cantidad = 50,
                            Costo = 10m,
                            FechaVencimiento = new DateOnly(2025, 11, 1),
                            ProductoID = 1
                        },
                        new
                        {
                            LoteID = 3,
                            Cantidad = 100,
                            Costo = 10m,
                            FechaVencimiento = new DateOnly(2026, 12, 1),
                            ProductoID = 1
                        },
                        new
                        {
                            LoteID = 4,
                            Cantidad = 500,
                            Costo = 100m,
                            FechaVencimiento = new DateOnly(2027, 1, 1),
                            ProductoID = 2
                        },
                        new
                        {
                            LoteID = 5,
                            Cantidad = 500,
                            Costo = 100m,
                            FechaVencimiento = new DateOnly(2027, 2, 1),
                            ProductoID = 2
                        },
                        new
                        {
                            LoteID = 6,
                            Cantidad = 250,
                            Costo = 100m,
                            FechaVencimiento = new DateOnly(2025, 12, 1),
                            ProductoID = 2
                        },
                        new
                        {
                            LoteID = 7,
                            Cantidad = 0,
                            Costo = 25m,
                            FechaVencimiento = new DateOnly(2025, 11, 1),
                            ProductoID = 3
                        },
                        new
                        {
                            LoteID = 8,
                            Cantidad = 100,
                            Costo = 25m,
                            FechaVencimiento = new DateOnly(2025, 12, 1),
                            ProductoID = 3
                        });
                });

            modelBuilder.Entity("Modelo.Entidades.Producto", b =>
                {
                    b.Property<int>("ProductoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductoID"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("A");

                    b.HasKey("ProductoID")
                        .HasName("pkProductosID");

                    b.ToTable("Productos", t =>
                        {
                            t.HasCheckConstraint("ckProductosEstado", "Estado IN('A','I','B')");
                        });

                    b.HasData(
                        new
                        {
                            ProductoID = 1,
                            Descripcion = "ALKAZERSER"
                        },
                        new
                        {
                            ProductoID = 2,
                            Descripcion = "JARABE PARA LA TOS"
                        },
                        new
                        {
                            ProductoID = 3,
                            Descripcion = "PANADOL"
                        });
                });

            modelBuilder.Entity("Modelo.Entidades.SalidaDet", b =>
                {
                    b.Property<int>("SalidaID")
                        .HasColumnType("int");

                    b.Property<int>("LoteID")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<decimal>("Costo")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("SalidaID", "LoteID")
                        .HasName("pkSalidaDetID");

                    b.HasIndex("LoteID");

                    b.ToTable("SalidaDet", null, t =>
                        {
                            t.HasCheckConstraint("ckSalidaDetCantidad", "Cantidad > 0");

                            t.HasCheckConstraint("ckSalidaDetCosto", "Costo > 0");
                        });
                });

            modelBuilder.Entity("Modelo.Entidades.SalidaEnc", b =>
                {
                    b.Property<int>("SalidaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalidaID"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("E");

                    b.Property<DateTime>("Fecha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("FechaRecibido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int>("SucursalID")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsuarioRecibe")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SalidaID")
                        .HasName("pkSalidaEncID");

                    b.HasIndex("SucursalID");

                    b.HasIndex("UsuarioID");

                    b.HasIndex("UsuarioRecibe");

                    b.ToTable("SalidaEnc", null, t =>
                        {
                            t.HasCheckConstraint("ckSalidaEncEstado", "Estado IN('E','R','B')");

                            t.HasCheckConstraint("ckSalidaEncFechaRecibido", "FechaRecibido IS NULL OR Fecha < FechaRecibido");
                        });
                });

            modelBuilder.Entity("Modelo.Entidades.Sucursal", b =>
                {
                    b.Property<int>("SucursalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SucursalID"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("A");

                    b.HasKey("SucursalID")
                        .HasName("pkSucursalID");

                    b.ToTable("Sucursales", t =>
                        {
                            t.HasCheckConstraint("ckSucursalesEstado", "Estado IN('A','I','B')");
                        });

                    b.HasData(
                        new
                        {
                            SucursalID = 1,
                            Descripcion = "CENTRO",
                            Direccion = "BO. CENTRO"
                        },
                        new
                        {
                            SucursalID = 2,
                            Descripcion = "ALTARA",
                            Direccion = "MALL ALTARA"
                        },
                        new
                        {
                            SucursalID = 3,
                            Descripcion = "GALERIAS",
                            Direccion = "MALL GALERIAS DEL VALLE"
                        },
                        new
                        {
                            SucursalID = 4,
                            Descripcion = "MEGAMALL",
                            Direccion = "MALL MEGAMALL"
                        });
                });

            modelBuilder.Entity("Modelo.Entidades.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("A");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.HasCheckConstraint("ckUsuarioEstado", "Estado IN('A','I','B')");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Modelo.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Modelo.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Modelo.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modelo.Entidades.Lote", b =>
                {
                    b.HasOne("Modelo.Entidades.Producto", "Producto")
                        .WithMany("Lotes")
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fkLotesProductoID");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Modelo.Entidades.SalidaDet", b =>
                {
                    b.HasOne("Modelo.Entidades.Lote", "Lote")
                        .WithMany("SalidaDets")
                        .HasForeignKey("LoteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fkSalidaDetLoteID");

                    b.HasOne("Modelo.Entidades.SalidaEnc", "Salida")
                        .WithMany("SalidaDets")
                        .HasForeignKey("SalidaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fkSalidaDetSalidaID");

                    b.Navigation("Lote");

                    b.Navigation("Salida");
                });

            modelBuilder.Entity("Modelo.Entidades.SalidaEnc", b =>
                {
                    b.HasOne("Modelo.Entidades.Sucursal", "Sucursales")
                        .WithMany("SalidaEncs")
                        .HasForeignKey("SucursalID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fkSalidaEncSucursalID");

                    b.HasOne("Modelo.Entidades.Usuario", "Usuario")
                        .WithMany("SalidasEnviadas")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fkSalidaEncUsuarioID");

                    b.HasOne("Modelo.Entidades.Usuario", "UsuarioRecibeRelacion")
                        .WithMany("SalidasRecibidas")
                        .HasForeignKey("UsuarioRecibe")
                        .HasConstraintName("fkSalidaEncUsuarioRecibe");

                    b.Navigation("Sucursales");

                    b.Navigation("Usuario");

                    b.Navigation("UsuarioRecibeRelacion");
                });

            modelBuilder.Entity("Modelo.Entidades.Usuario", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Modelo.Entidades.Lote", b =>
                {
                    b.Navigation("SalidaDets");
                });

            modelBuilder.Entity("Modelo.Entidades.Producto", b =>
                {
                    b.Navigation("Lotes");
                });

            modelBuilder.Entity("Modelo.Entidades.SalidaEnc", b =>
                {
                    b.Navigation("SalidaDets");
                });

            modelBuilder.Entity("Modelo.Entidades.Sucursal", b =>
                {
                    b.Navigation("SalidaEncs");
                });

            modelBuilder.Entity("Modelo.Entidades.Usuario", b =>
                {
                    b.Navigation("SalidasEnviadas");

                    b.Navigation("SalidasRecibidas");
                });
#pragma warning restore 612, 618
        }
    }
}
